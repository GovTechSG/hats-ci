---

   - name: Get current username
     shell: echo `whoami`
     register: ansible_username     

   - debug: 
        msg: "{{ ansible_username.stdout }}"

   - name: Get Temp Directory
     shell: command echo `echo $TMPDIR`com.younglim.hats-ci
     register: ansible_tmpdir     

   - name: Create Temp Directory
     file: path="{{ ansible_tmpdir.stdout }}" state="directory"
        
   - name: Upgrade caskroom/versions
     homebrew_cask:
        name: caskroom/versions
        state: upgraded
        update_homebrew: yes
        install_options: force

   - name: Install Java, Android SDK, NDK and Studio through cask
     homebrew_cask: 
        name: "{{ item }}"
        state: upgraded
     with_items:
       - caskroom/versions/java8
       - android-sdk
       - android-ndk
       - android-studio
     ignore_errors: true

   - name: Install ant, maven, gradle
     homebrew: 
        name: "{{ item }}"
        state: present
     with_items:
       - ant
       - maven
       - gradle
     ignore_errors: true

   - name: Download Google Intel HAXM installer
     get_url: url="https://dl.google.com/android/repository/extras/intel/haxm-macosx_r6_2_1.zip" dest="{{ ansible_tmpdir.stdout }}/haxm-macosx.zip" force=yes

   - name: Create haxm directory
     file: path="~/hats/haxm" state="directory"

   - name: Unzip Google Intel HAXM installer
     unarchive: 
        src: "{{ ansible_tmpdir.stdout }}/haxm-macosx.zip"
        dest: "~/hats/haxm" 

   - name: Change permissions of HAXM iinstaller script
     file: path="~/hats/haxm/silent_install.sh" mode="+x"

   - name: Get  ~/hats directory
     shell: command echo ~/hats
     register: hats_directory

   - name: Install Intel HAXM
     become: yes
     shell: "{{ hats_directory.stdout }}/haxm/silent_install.sh"
     ignore_errors: yes

   - name: Set Environment Variable for ANDROID_SDK_ROOT, ANDROID_HOME, ANDROID_SDK_HOME and PATHs
     lineinfile: 
        dest: ~/hats/hats_shell
        insertafter: EOF
        line: "{{ item.path }}"
        state: present
     with_items:
       - { path: 'export ANDROID_SDK_ROOT=/usr/local/share/android-sdk' }
       - { path: 'export ANDROID_HOME=/usr/local/share/android-sdk' }
       - { path: 'export ANDROID_SDK_HOME=/usr/local/share/android-sdk' }
       - { path: 'export PATH=$ANDROID_HOME/platform-tools:$PATH' }
       - { path: 'export PATH=$ANDROID_HOME/tools:$PATH' }
       - { path: 'export PATH=$ANDROID_HOME/tools/bin:$PATH' }
       - { path: 'export PATH=$ANDROID_HOME/emulator:$PATH' }
       - { path: 'function emulator { cd "$(dirname "$(which emulator)")" && ./emulator "$@"; }' }
       
   - name: Create $ANDROID_HOME/.android directory
     file: path="/usr/local/share/android-sdk/.android" state="directory"

   - name: Create $ANDROID_HOME/.android/repositories.cfg
     file: path="/usr/local/share/android-sdk/.android/repositories.cfg" state="touch"

   - name: Create platform folder
     file: path="/usr/local/share/android-sdk/platforms" state="directory"
   
   - name: Update sdkmanager
     shell: . ~/hats/hats_shell && sdkmanager --update
 
   - name: Accept sdkmanager license
     shell: . ~/hats/hats_shell && sdkmanager --licenses
     
   - name: Install System Image for creating Android AVD of v27
     shell: . ~/hats/hats_shell && sdkmanager 'build-tools;27.0.3' 'system-images;android-27;google_apis;x86' 'platform-tools'
     
   - name: Create AVD of version 27 
     shell: . ~/hats/hats_shell && echo no | avdmanager create avd -n testAVD -k "system-images;android-27;google_apis;x86" -g "google_apis" --force
